{"version":3,"sources":["PackageClass.js","App.js","serviceWorker.js","index.js"],"names":["PackageClass","props","renderDependencies","bind","matchStyleSettings","display","padding","color","cursor","style","textAlign","this","Data","depends","map","element","index","includes","split","value","AllPackageNames","trim","Index","indexOf","onClick","CallbackNext","console","log","CallbackHome","CallbackBack","packageName","description","Component","App","state","data","indexs","show","renderPackagelist","fetch","then","response","json","res","listOfpackageNames","val","setState","packageNames","event","parseInt","target","attributes","indexes","push","pop","length","hideorshow","callbackHome","callbackback","callbackNext","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23d712f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nexport default class PackageClass extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderDependencies = this.renderDependencies.bind(this);\r\n    }\r\n    renderDependencies() {\r\n        let matchStyleSettings = { display: \"inline-block\", padding: \"5px\", color: \"blue\", cursor: \"pointer\" }\r\n        return (\r\n            <div style={{ textAlign: \"center\" }}>\r\n                <p style={{ display:\"inline-block\" }}>Dependencies: </p>\r\n                {\r\n                    this.props.Data.depends.map((element, index) => {\r\n                        if (element.includes(\"|\")) {\r\n                            return element.split(\"|\").map((value, index) => {\r\n                                if (this.props.AllPackageNames.includes(value.trim())) {\r\n                                    if (index % 2 === 0) {\r\n                                        return (\r\n                                            <div style={{ display: \"inline-block\" }}>\r\n                                                <p Index={this.props.AllPackageNames.indexOf(value.trim())} style={matchStyleSettings} onClick={this.props.CallbackNext}> {value} </p>\r\n                                                <p style={{ display: \"inline-block\" }}>|</p>\r\n                                            </div>\r\n                                        )\r\n                                    } else {\r\n                                        return <p Index={this.props.AllPackageNames.indexOf(value.trim())} style={matchStyleSettings} onClick={this.props.CallbackNext}> {value} </p>\r\n                                    }\r\n                                } else {\r\n                                    if (index % 2 === 0) {\r\n                                        return (\r\n                                            <div style={{ display: \"inline-block\" }}>\r\n                                                <p style={{ display: \"inline-block\", padding: \"5px\" }}> {value} </p>\r\n                                                <p style={{ display: \"inline-block\" }}>|</p>\r\n                                            </div>\r\n                                        )\r\n                                    } else {\r\n                                        return <p style={{ display: \"inline-block\", padding: \"5px\" }}> {value} </p>\r\n                                    }\r\n                                }\r\n                            })\r\n                        } else {\r\n                            if (this.props.AllPackageNames.includes(element)) {\r\n                                return <p Index={this.props.AllPackageNames.indexOf(element)} style={matchStyleSettings} onClick={this.props.CallbackNext}>{element}</p>\r\n                            } else {\r\n                                return <p style={{ display: \"inline-block\", padding: \"5px\" }}> {element} </p>\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n        console.log(this.props);\r\n        return (\r\n            <div>\r\n                <p onClick={this.props.CallbackHome} style={{ cursor: 'pointer' }}>Home</p>\r\n                <p onClick={this.props.CallbackBack} style={{ cursor: \"pointer\" }}>Back</p>\r\n                <p style={{ textAlign: \"center\" }}>Package Name: {this.props.Data.packageName}</p>\r\n                <this.renderDependencies />\r\n                <p style={{ textAlign: \"center\" }}>{this.props.Data.description}</p>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Packageclass from './PackageClass';\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: \"\",\r\n            indexs: [],\r\n            show: false\r\n        }\r\n        this.renderPackagelist = this.renderPackagelist.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        fetch(\"/file\").then(response => response.json())\r\n            .then(res => {\r\n                let listOfpackageNames = res.map(val => val.packageName.trim())\r\n                console.log(res);\r\n                this.setState({\r\n                    data: res,\r\n                    packageNames: listOfpackageNames\r\n                })\r\n            })\r\n    }\r\n    hideorshow(event) {\r\n        let index = parseInt(event.target.attributes.index.value);\r\n        let indexes = this.state.indexs;\r\n        indexes.push(index);\r\n        this.setState({\r\n            indexs: indexes,\r\n            show: true\r\n        })\r\n    }\r\n    callbackHome() {\r\n        this.setState({\r\n            show: false,\r\n            indexs: []\r\n        })\r\n    }\r\n    callbackNext(event) {\r\n        let index = parseInt(event.target.attributes.index.value);\r\n        let indexes = this.state.indexs;\r\n        indexes.push(index);\r\n\r\n        this.setState({\r\n            indexs: indexes\r\n        })\r\n    }\r\n    callbackback() {\r\n        let indexes = this.state.indexs;\r\n        indexes.pop();\r\n        if (indexes.length === 0) {\r\n            this.setState({\r\n                indexs: indexes,\r\n                show: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                indexs: indexes\r\n            })\r\n        }\r\n    }\r\n    renderPackagelist(props) {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.data.map((element, index) => {\r\n                        return (\r\n                            <p index={index} onClick={this.hideorshow.bind(this)} style={{ color: \"blue\", cursor: 'pointer', textAlign: \"center\" }}> {element.packageName}</p>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.state.data !== \"\" && this.state.show === false) {\r\n            return <this.renderPackagelist />\r\n        } else if (this.state.data !== \"\" && this.state.show) {\r\n            return <Packageclass AllPackageNames={this.state.packageNames} CallbackHome={this.callbackHome.bind(this)} CallbackBack={this.callbackback.bind(this)} CallbackNext={this.callbackNext.bind(this)} Data={this.state.data[this.state.indexs[this.state.indexs.length - 1]]} />\r\n        } else {\r\n            return <p>Waiting for data</p>\r\n        }\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}