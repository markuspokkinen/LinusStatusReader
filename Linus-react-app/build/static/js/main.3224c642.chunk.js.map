{"version":3,"sources":["PackageClass.js","App.js","serviceWorker.js","index.js"],"names":["PackageClass","onClick","this","props","CallbackHome","style","cursor","textAlign","Data","packageName","display","depends","map","element","index","includes","split","value","console","log","AllPackageNames","trim","Index","indexOf","padding","color","CallbackNext","description","Component","App","state","data","show","fetch","then","response","json","res","listOfpackageNames","val","setState","packageNames","event","parseInt","target","attributes","hideorshow","bind","callbackHome","callbackNext","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3224c642.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nexport default class PackageClass extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p onClick={this.props.CallbackHome} style={{ cursor: 'pointer' }}>Home</p>\r\n                <p style={{ textAlign: \"center\" }}>Package Name: {this.props.Data.packageName}</p>\r\n                <div style={{ textAlign: \"center\" }} >\r\n                    <p style={{ display: \"inline-block\" }}>Dependencies: </p>\r\n                    {\r\n                        this.props.Data.depends.map((element, index) => {\r\n                            if (element.includes(\"|\")) {\r\n                                return element.split(\"|\").map((value) => {\r\n                                    console.log(this.props.AllPackageNames)\r\n                                    console.log(value)\r\n                                    if (this.props.AllPackageNames.includes(value.trim())) {\r\n                                       \r\n                                        return <p Index={this.props.AllPackageNames.indexOf(value.trim())} style={{ display: \"inline-block\", padding: \"10px\", color: \"blue\", cursor: \"pointer\" }} onClick={this.props.CallbackNext}> {value} </p>\r\n                                    } else {\r\n                                        return <p style={{ display: \"inline-block\", padding: \"10px\" }}> {value} </p>\r\n                                    }\r\n                                })\r\n                            } else {\r\n                                if (this.props.AllPackageNames.includes(element)) {\r\n                                    return <p Index={this.props.AllPackageNames.indexOf(element)} style={{ display: \"inline-block\", padding: \"10px\", color: \"blue\", cursor: \"pointer\" }} onClick={this.props.CallbackNext}> {element} </p>\r\n                                } else {\r\n                                    return <p style={{ display: \"inline-block\", padding: \"10px\" }}> {element} </p>\r\n                                }\r\n                            }\r\n\r\n                        })\r\n                    }\r\n                </div>\r\n                <p style={{ textAlign: \"center\" }}>{this.props.Data.description}</p>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport Packageclass from './PackageClass';\nexport default class App extends Component {\n\n    constructor(props) {\n        super(props);\r\n        this.state = {\r\n            data: \"\",\r\n            index: \"\",\r\n            show: false\r\n        }\r\n    }\n\n    componentDidMount() {\n        fetch(\"/file\").then(response => response.json())\r\n            .then(res => {\r\n                let listOfpackageNames = res.map(val => val.packageName.trim())\r\n                console.log(res);\r\n                this.setState({\r\n                    data: res,\r\n                    packageNames: listOfpackageNames\r\n                }, () => {\r\n                    console.log(this.state)\r\n                })\r\n            })\r\n    }\n    hideorshow(event) {\n        this.setState({\r\n            index: parseInt(event.target.attributes.index.value),\r\n            show: true\r\n        });\n\n    }\n    callbackHome() {\n        this.setState({\r\n            show:false\r\n        })\r\n    }\n    callbackNext(event) {\n        console.log(parseInt(event.target.attributes.index.value))\r\n        this.setState({\r\n            index: parseInt(event.target.attributes.index.value)\r\n        })\r\n    }\n    render() {\n        if (this.state.data !== \"\" && this.state.show === false) {\n            return (\n                <div>\n                    {\n                        this.state.data.map((element, index) => {\r\n                            return (\r\n                                <p index={index} onClick={this.hideorshow.bind(this)} style={{ color: \"blue\", cursor: 'pointer', textAlign: \"center\"}}> {element.packageName}</p>\r\n                            )\r\n                        })\r\n                    }\n                </div>\n            );\n        } else if (this.state.data !== \"\" && this.state.show) {\n            return (\r\n                <Packageclass AllPackageNames={this.state.packageNames} CallbackHome={this.callbackHome.bind(this)} CallbackNext={this.callbackNext.bind(this)} Data={this.state.data[this.state.index]} />\r\n                )\r\n        } else {\n            return (\n                <p>Waiting for data</p>\r\n            );\r\n        }\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}