{"version":3,"sources":["PackageClass.js","App.js","serviceWorker.js","index.js"],"names":["PackageClass","console","log","this","props","Data","onClick","CallbackReturn","style","cursor","packageName","depends","description","Component","App","state","data","index","show","fetch","then","response","json","res","setState","event","parseInt","target","attributes","value","map","element","hideorshow","bind","color","textAlign","split","callbackReturn","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOACqBA,E,iLAKT,OADJC,QAAQC,IAAIC,KAAKC,MAAMC,MAEf,6BACI,uBAAGC,QAASH,KAAKC,MAAMG,eAAgBC,MAAO,CAAEC,OAAQ,YAAxD,QACA,2BAAIN,KAAKC,MAAMC,KAAKK,aACpB,2BAAIP,KAAKC,MAAMC,KAAKM,SACpB,2BAAIR,KAAKC,MAAMC,KAAKO,kB,GAVEC,aCCrBC,E,YAEjB,WAAYV,GAAQ,IAAD,8BACf,4CAAMA,KACDW,MAAQ,CACTC,KAAM,GACNC,MAAO,GACPC,MAAM,GALK,E,iFASE,IAAD,OAChBC,MAAM,SACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFtB,QAAQC,IAAIqB,GACZ,EAAKC,SAAS,CACVR,KAAMO,S,iCAIXE,GACPtB,KAAKqB,SAAS,CACVP,MAAOS,SAASD,EAAME,OAAOC,WAAWX,MAAMY,OAC9CX,MAAM,M,uCAKVf,KAAKqB,SAAS,CACVN,MAAK,M,+BAGH,IAAD,OACL,MAAwB,KAApBf,KAAKY,MAAMC,OAAmC,IAApBb,KAAKY,MAAMG,KAEjC,6BAEQf,KAAKY,MAAMC,KAAKc,KAAI,SAACC,EAASd,GAC1B,OACI,uBAAGA,MAAOA,EAAOX,QAAS,EAAK0B,WAAWC,KAAK,GAAOzB,MAAO,CAAE0B,MAAO,OAAQzB,OAAQ,UAAW0B,UAAW,WAA5G,IAA0HJ,EAAQrB,YAAY0B,MAAM,KAAK,QAMlJ,KAApBjC,KAAKY,MAAMC,MAAeb,KAAKY,MAAMG,KAExC,kBAAC,EAAD,CAAcX,eAAgBJ,KAAKkC,eAAeJ,KAAK9B,MAAOE,KAAMF,KAAKY,MAAMC,KAAKb,KAAKY,MAAME,SAI/F,mD,GApDiBJ,aCUbyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.fd1742c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nexport default class PackageClass extends Component {\r\n\r\n\r\n    render() {\r\n        console.log(this.props.Data)\r\n            return (\r\n                <div>\r\n                    <p onClick={this.props.CallbackReturn} style={{ cursor: 'pointer' }}>Back</p>\r\n                    <p>{this.props.Data.packageName}</p>\r\n                    <p>{this.props.Data.depends}</p>\r\n                    <p>{this.props.Data.description}</p>\r\n                </div>\r\n\r\n            );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport Packageclass from './PackageClass';\nexport default class App extends Component {\n\n    constructor(props) {\n        super(props);\r\n        this.state = {\r\n            data: \"\",\r\n            index: \"\",\r\n            show: false\r\n        }\r\n    }\n\n    componentDidMount() {\n        fetch(\"/file\")\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    data: res,\r\n                })\r\n            })\r\n    }\n    hideorshow(event) {\n        this.setState({\r\n            index: parseInt(event.target.attributes.index.value),\r\n            show: true\r\n        });\n\n    }\n    callbackReturn() {\n        this.setState({\r\n            show:false\r\n        })\r\n    }\n    render() {\n        if (this.state.data !== \"\" && this.state.show === false) {\n            return (\n                <div>\n                    {\n                        this.state.data.map((element, index) => {\r\n                            return (\r\n                                <p index={index} onClick={this.hideorshow.bind(this)} style={{ color: \"blue\", cursor: 'pointer', textAlign: \"center\" }}> {element.packageName.split(\":\")[1]}</p>\r\n                            )\r\n                        })\r\n                    }\n                </div>\n            );\n        } else if (this.state.data !== \"\" && this.state.show) {\n            return (\r\n                <Packageclass CallbackReturn={this.callbackReturn.bind(this)} Data={this.state.data[this.state.index]} />\r\n                )\r\n        } else {\n            return (\n                <p>Waiting for data</p>\r\n            );\r\n        }\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}